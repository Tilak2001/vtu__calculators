// Models/Employee.cs

using System;
using System.ComponentModel.DataAnnotations;

namespace EmployeeAPI.Models
{
    public class Employee
    {
        public int Id { get; set; }

        [Required]
        [StringLength(100)]
        public string Name { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DOB { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DOJ { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [Phone]
        public string PhoneNumber { get; set; }

        [Required]
        public string Address { get; set; }

        [Required]
        public string Gender { get; set; }

        public int Age => CalculateAge();

        // Calculate age from DOB
        private int CalculateAge()
        {
            var today = DateTime.Today;
            var age = today.Year - DOB.Year;

            if (DOB.Date > today.AddYears(-age)) age--;

            return age;
        }
    }
}



// Controllers/EmployeeController.cs

using Microsoft.AspNetCore.Mvc;
using EmployeeAPI.Models;
using System;
using System.Text.RegularExpressions;

namespace EmployeeAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmployeeController : ControllerBase
    {
        [HttpPost]
        public IActionResult CreateEmployee([FromBody] Employee employee)
        {
            if (employee == null)
            {
                return BadRequest("Employee data is required.");
            }

            // Validate Date of Birth
            if (employee.DOB >= DateTime.Today)
            {
                return BadRequest("DOB cannot be in the future.");
            }

            // Validate Date of Joining
            if (employee.DOJ >= DateTime.Today)
            {
                return BadRequest("DOJ cannot be in the future.");
            }

            // Validate Email
            if (!IsValidEmail(employee.Email))
            {
                return BadRequest("Invalid email address.");
            }

            // Validate Phone Number
            if (!IsValidPhoneNumber(employee.PhoneNumber))
            {
                return BadRequest("Invalid phone number format.");
            }

            // Simulate saving the employee to a database
            // In a real application, you would save this data to a DB

            return Ok(employee); // Return the employee object
        }

        private bool IsValidEmail(string email)
        {
            var emailPattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
            return Regex.IsMatch(email, emailPattern);
        }

        private bool IsValidPhoneNumber(string phoneNumber)
        {
            var phonePattern1 = @"^\d{3}-\d{3}-\d{4}$"; // xxx-xxx-xxxx
            var phonePattern2 = @"^\d{10}$"; // xxxxxxxxxx
            var phonePattern3 = @"^\(\d{3}\)\d{3}-\d{4}$"; // (xxx)xxx-xxxx

            return Regex.IsMatch(phoneNumber, phonePattern1) || Regex.IsMatch(phoneNumber, phonePattern2) || Regex.IsMatch(phoneNumber, phonePattern3);
        }
    }
}




// Validation/PhoneNumberValidationAttribute.cs
using System.ComponentModel.DataAnnotations;
using System.Text.RegularExpressions;

public class PhoneNumberValidationAttribute : ValidationAttribute
{
    public override bool IsValid(object value)
    {
        var phoneNumber = value as string;

        if (string.IsNullOrEmpty(phoneNumber))
            return false;

        var phonePattern1 = @"^\d{3}-\d{3}-\d{4}$"; // xxx-xxx-xxxx
        var phonePattern2 = @"^\d{10}$"; // xxxxxxxxxx
        var phonePattern3 = @"^\(\d{3}\)\d{3}-\d{4}$"; // (xxx)xxx-xxxx

        return Regex.IsMatch(phoneNumber, phonePattern1) || Regex.IsMatch(phoneNumber, phonePattern2) || Regex.IsMatch(phoneNumber, phonePattern3);
    }
}


// Models/Employee.cs
using System;
using System.ComponentModel.DataAnnotations;

namespace EmployeeAPI.Models
{
    public class Employee
    {
        public int Id { get; set; }

        [Required]
        [StringLength(100)]
        public string Name { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DOB { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DOJ { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [PhoneNumberValidation]
        public string PhoneNumber { get; set; }

        [Required]
        public string Address { get; set; }

        [Required]
        public string Gender { get; set; }

        public int Age => CalculateAge();

        private int CalculateAge()
        {
            var today = DateTime.Today;
            var age = today.Year - DOB.Year;

            if (DOB.Date > today.AddYears(-age)) age--;

            return age;
        }
    }
}


// Controllers/EmployeeController.cs
using Microsoft.AspNetCore.Mvc;
using EmployeeAPI.Models;

namespace EmployeeAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmployeeController : ControllerBase
    {
        [HttpPost]
        public IActionResult CreateEmployee([FromBody] Employee employee)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            // Simulate saving the employee to a database
            return Ok(employee);
        }
    }
}

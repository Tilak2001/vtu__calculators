// Models/Employee.cs

using System;
using System.ComponentModel.DataAnnotations;

namespace EmployeeAPI.Models
{
    public class Employee
    {
        public int Id { get; set; }

        [Required]
        [StringLength(100)]
        public string Name { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DOB { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DOJ { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [Phone]
        public string PhoneNumber { get; set; }

        [Required]
        public string Address { get; set; }

        [Required]
        public string Gender { get; set; }

        public int Age => CalculateAge();

        // Calculate age from DOB
        private int CalculateAge()
        {
            var today = DateTime.Today;
            var age = today.Year - DOB.Year;

            if (DOB.Date > today.AddYears(-age)) age--;

            return age;
        }
    }
}



// Controllers/EmployeeController.cs

using Microsoft.AspNetCore.Mvc;
using EmployeeAPI.Models;
using System;
using System.Text.RegularExpressions;

namespace EmployeeAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmployeeController : ControllerBase
    {
        [HttpPost]
        public IActionResult CreateEmployee([FromBody] Employee employee)
        {
            if (employee == null)
            {
                return BadRequest("Employee data is required.");
            }

            // Validate Date of Birth
            if (employee.DOB >= DateTime.Today)
            {
                return BadRequest("DOB cannot be in the future.");
            }

            // Validate Date of Joining
            if (employee.DOJ >= DateTime.Today)
            {
                return BadRequest("DOJ cannot be in the future.");
            }

            // Validate Email
            if (!IsValidEmail(employee.Email))
            {
                return BadRequest("Invalid email address.");
            }

            // Validate Phone Number
            if (!IsValidPhoneNumber(employee.PhoneNumber))
            {
                return BadRequest("Invalid phone number format.");
            }

            // Simulate saving the employee to a database
            // In a real application, you would save this data to a DB

            return Ok(employee); // Return the employee object
        }

        private bool IsValidEmail(string email)
        {
            var emailPattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
            return Regex.IsMatch(email, emailPattern);
        }

        private bool IsValidPhoneNumber(string phoneNumber)
        {
            var phonePattern1 = @"^\d{3}-\d{3}-\d{4}$"; // xxx-xxx-xxxx
            var phonePattern2 = @"^\d{10}$"; // xxxxxxxxxx
            var phonePattern3 = @"^\(\d{3}\)\d{3}-\d{4}$"; // (xxx)xxx-xxxx

            return Regex.IsMatch(phoneNumber, phonePattern1) || Regex.IsMatch(phoneNumber, phonePattern2) || Regex.IsMatch(phoneNumber, phonePattern3);
        }
    }
}


using EmployeeAPI.Models;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace EmployeeAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmployeeController : ControllerBase
    {
        // In-memory list to store employees
        private static List<Employee> employees = new List<Employee>();

        // GET: api/Employee
        [HttpGet]
        public List<Employee> GetEmployees()
        {
            // Return the list of employees
            return employees;
        }

        // POST: api/Employee
        [HttpPost]
        public IActionResult CreateEmployee([FromBody] Employee employee)
        {
            if (employee == null)
            {
                return BadRequest("Employee data is required.");
            }

            // Validate the date of birth
            if (employee.DOB == default)
            {
                return BadRequest("Invalid Date of Birth.");
            }

            // Validate the joining date (DOJ)
            if (employee.DOJ == default)
            {
                return BadRequest("Invalid Joining Date.");
            }

            // Validate Email
            if (!IsValidEmail(employee.Email))
            {
                return BadRequest("Invalid email address.");
            }

            // Validate Phone Number
            if (!IsValidPhoneNumber(employee.PhoneNumber))
            {
                return BadRequest("Invalid phone number.");
            }

            // Calculate Age and add it to the employee object
            employee.Age = CalculateAge(employee.DOB);

            // Add the employee to the list
            employees.Add(employee);

            // Return the employee object created
            return Ok(employee);
        }

        // Method to calculate age based on DOB
        private int CalculateAge(DateTime dob)
        {
            var today = DateTime.Today;
            var age = today.Year - dob.Year;

            // Check if the birthday has passed this year; if not, subtract one year from the age.
            if (dob.Date > today.AddYears(-age))
            {
                age--;
            }

            return age;
        }

        // Helper Method to validate email using regex
        private bool IsValidEmail(string email)
        {
            var emailRegex = new Regex(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$");
            return emailRegex.IsMatch(email);
        }

        // Helper Method to validate phone number using regex
        private bool IsValidPhoneNumber(string phoneNumber)
        {
            var phoneRegex = new Regex(@"^(\d{10}|\d{3}[-]\d{3}[-]\d{4}|\(\d{3}\)\d{3}[-]\d{4})$");
            return phoneRegex.IsMatch(phoneNumber);
        }
    }
}


// Validation/PhoneNumberValidationAttribute.cs
using System.ComponentModel.DataAnnotations;
using System.Text.RegularExpressions;

public class PhoneNumberValidationAttribute : ValidationAttribute
{
    public override bool IsValid(object value)
    {
        var phoneNumber = value as string;

        if (string.IsNullOrEmpty(phoneNumber))
            return false;

        var phonePattern1 = @"^\d{3}-\d{3}-\d{4}$"; // xxx-xxx-xxxx
        var phonePattern2 = @"^\d{10}$"; // xxxxxxxxxx
        var phonePattern3 = @"^\(\d{3}\)\d{3}-\d{4}$"; // (xxx)xxx-xxxx

        return Regex.IsMatch(phoneNumber, phonePattern1) || Regex.IsMatch(phoneNumber, phonePattern2) || Regex.IsMatch(phoneNumber, phonePattern3);
    }
}


// Models/Employee.cs
using System;
using System.ComponentModel.DataAnnotations;

namespace EmployeeAPI.Models
{
    public class Employee
    {
        public int Id { get; set; }

        [Required]
        [StringLength(100)]
        public string Name { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DOB { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DOJ { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [PhoneNumberValidation]
        public string PhoneNumber { get; set; }

        [Required]
        public string Address { get; set; }

        [Required]
        public string Gender { get; set; }

        public int Age => CalculateAge();

        private int CalculateAge()
        {
            var today = DateTime.Today;
            var age = today.Year - DOB.Year;

            if (DOB.Date > today.AddYears(-age)) age--;

            return age;
        }
    }
}


// Controllers/EmployeeController.cs
using Microsoft.AspNetCore.Mvc;
using EmployeeAPI.Models;

namespace EmployeeAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmployeeController : ControllerBase
    {
        [HttpPost]
        public IActionResult CreateEmployee([FromBody] Employee employee)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            // Simulate saving the employee to a database
            return Ok(employee);
        }
    }
}


using Microsoft.AspNetCore.Mvc;

namespace WebApplication3.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class StudentApiController : ControllerBase
    {
        private static List<Students> Students = new List<Students>()
        {
            new Students()
            {
                StudentId = 1, StudentName = "Mukesh", Gender = "Male", Age = 19
            },
            new Students()
            {
                StudentId = 2, StudentName = "Luffy", Gender = "Male", Age = 19
            },
            new Students()
            {
                StudentId = 3, StudentName = "Zoro", Gender = "Male", Age = 21
            },
            new Students()
            {
                StudentId = 4, StudentName = "Nami", Gender = "Female", Age = 20
            },
            new Students()
            {
                StudentId = 5, StudentName = "Ace", Gender = "Male", Age = 22
            }
        };

        [HttpGet]
        public List<Students> GetStudents()
        {
            return Students;
        }

        [HttpGet("{id:int}")]
        public Students GetStudentById(int id)
        {
            return Students.Where(n => n.StudentId == id).FirstOrDefault();
        }

        [HttpGet("{name:alpha}")]
        public Students GetStudentByName(String name)
        {
            return Students.Where(n => n.StudentName == name).FirstOrDefault();
        }


        [HttpDelete("{id}")]
        public bool DeleteStudentById(int id)
        {
            var student =  Students.Where(n => n.StudentId == id).FirstOrDefault();
            Students.Remove(student);

            return true;
        }

        [HttpPost]
        public Students CreateStudents([FromBody] Students newStudents)
        {
            Students std = new Students
            {
                StudentId = newStudents.StudentId,
                StudentName = newStudents.StudentName,
                Gender = newStudents.Gender,
                Age = newStudents.Age
            };
            Students.Add(std);

            return std;
        }
    }
}

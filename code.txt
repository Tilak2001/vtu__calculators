using System;

namespace CountRecord
{
    internal class Program
    {
        static void Main(string[] args)
        {
            var totalCount = 0;
            int[] arr = { 10, 5, 5, 2, 8, 4 };

            // Manually count elements in the array
            foreach (var item in arr)
            {
                totalCount++;
            }

            Console.WriteLine(totalCount);
        }
    }
}


using System;
using System.Text;

namespace ReverseString
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.Write("Enter a String : ");
            string input = Console.ReadLine();

            // Replace multiple characters using custom logic
            string replaceString = ReplaceMultiple(input);

            // Initialize an empty string to store the reversed string
            string Reverse = "";

            // Reverse the modified string
            for (int i = 0; i < replaceString.Length; i++)
            {
                Reverse = replaceString[i] + Reverse;
            }

            // Print the original and modified string lengths
            Console.WriteLine("Original Length: " + input.Length);
            Console.WriteLine("Modified Length: " + replaceString.Length);

            // Print the reversed string
            Console.WriteLine("Reversed String: " + Reverse);
        }

        // Custom method to replace multiple characters without using Replace() or Dictionary
        static string ReplaceMultiple(string input)
        {
            StringBuilder result = new StringBuilder();

            foreach (char c in input)
            {
                switch (c)
                {
                    case 'o':
                        result.Append('0');
                        break;
                    case 'u':
                        result.Append('1');
                        break;
                    case 'a':
                        result.Append('@');
                        break;
                    default:
                        result.Append(c);
                        break;
                }
            }

            return result.ToString();
        }
    }
}

using System;

namespace ReverseString
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.Write("Enter a String : ");
            string input = Console.ReadLine();

            // Replace multiple characters in the string
            string replaceString = input.Replace('o', '0')
                                        .Replace('u', '1')
                                        .Replace('a', '@');

            // Initialize an empty string to store the reversed string
            string Reverse = "";

            // Reverse the modified string
            for (int i = 0; i < replaceString.Length; i++)
            {
                Reverse = replaceString[i] + Reverse;
            }

            // Print the original and modified string lengths
            Console.WriteLine("Original Length: " + input.Length);
            Console.WriteLine("Modified Length: " + replaceString.Length);

            // Print the reversed string
            Console.WriteLine("Reversed String: " + Reverse);
        }
    }
}




using System;

class Program
{
    static void Main()
    {
        Console.Write("Enter a number: ");
        string input = Console.ReadLine();

        if (int.TryParse(input, out int number))
        {
            Console.Write("Enter Sorting order (asc/desc): ");
            string order = Console.ReadLine().ToLower();
            string result = SortDigits(number, order);
            Console.WriteLine($"Sorted result: {result}");
        }
        else
        {
            Console.WriteLine("Invalid input!!");
        }
    }

    static string SortDigits(int number, string order)
    {
        string numberString = Math.Abs(number).ToString();

        char[] digits = new char[numberString.Length];
        for (int i = 0; i < numberString.Length; i++)
        {
            digits[i] = numberString[i];
        }

        for (int i = 0; i < digits.Length; i++)
        {
            for (int j = i + 1; j < digits.Length; j++)
            {
                if (order == "asc" && digits[i] > digits[j])
                {
                    char temp = digits[i];
                    digits[i] = digits[j];
                    digits[j] = temp;
                }
                else if (order == "desc" && digits[i] < digits[j])
                {
                    char temp = digits[i];
                    digits[i] = digits[j];
                    digits[j] = temp;
                }
            }
        }
        return new string(digits);
    }
}
